"""Solution of the Day 5 assignment."""
from os.path import join
import re

def extract_integers(text: str) -> list[str]:
    """This function extracts list of integers from string. Each integer should be separated by 
    space.

    Args:
        text (str): string of number repsenting characters, numbers separated by spaces

    Returns:
        list[str]: extracted numbers
    """
    return re.findall(r"\d+", text)


def key_to_key(key: int, ranges: list[tuple[int, ...]]) -> int:

    new_key: int = key
    for range_tuple in ranges:
        if key >= range_tuple[1] and key <= (range_tuple[1] + range_tuple[2]):
            return key - range_tuple[1] + range_tuple[0]
    return new_key

def main(file_path: str) -> list[int]:
    """Main function of the solution

    Args:
        file_path (str): _description_
    """

    seeds: list[int] = []
    map_name: str = ""
    map_almanach: dict[str, list[tuple[int, ...]]] = {}

    with open(file_path, "r", encoding="utf_8") as file:
        for line in file:

            if "seeds" in line:
                seeds_text: list[str] = line.split(":")
                seeds = [int(seed) for seed in extract_integers(seeds_text[1])]
            elif "map" in line:
                map_name = line.replace("map:", "").strip()
            elif line.strip():
                if map_name in map_almanach:
                    map_almanach[map_name].append(tuple(int(number) for number in extract_integers(line)))
                else:
                    map_almanach[map_name] = [tuple(int(number) for number in extract_integers(line))]

    current_name: str = "seed"
    current_key: str = ""
    key_chain: dict[str, str] = {}
    key_list: list[str] = [key for key in map_almanach.keys()]
    done: bool = False
    next_key_found: bool = False

    while not done:

        for key in key_list:
            next_key_found = False
            name_list: list[str] = key.split("-to-")
            if current_name in name_list[0]:
                current_name = name_list[1]
                key_chain[current_key] = key
                key_list.append(key)
                current_key = key
                next_key_found = True

        if not next_key_found:
            done = True

    # key_chain.pop("")

    # ranges: list[tuple[int, ...]] = map_almanach[key_list[0]]

    for seed_idx, _ in enumerate(seeds):
        current_key = ""
        done = False

        while not done:

            if current_key in key_chain:
                current_key = key_chain[current_key]
                ranges: list[tuple[int, ...]] = map_almanach[current_key]
                seeds[seed_idx] = key_to_key(seeds[seed_idx], ranges)
            else:
                done = True    
    return seeds

def test(test_file_path: str) -> bool:

    true_locations: list[int] = [82, 43, 86, 35]
    locations = main(test_file_path)

    return all(true_location == location for true_location, location in zip(true_locations, locations))

if __name__ == "__main__":

    file_path: str = join(".", "Day_5", "input.txt")
    # file_path: str = join(".", "Day_5", "test.txt")

    print(min(main(file_path)))
    # print(test(file_path))
